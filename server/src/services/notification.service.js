let botInstance;

module.exports = {
  init: (bot) => {
    botInstance = bot;
  },
  sendNotification: async (telegramId, message) => {
    if (!botInstance) {
      console.error('Bot –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!');
      return;
    }
    try {
      await botInstance.telegram.sendMessage(telegramId, message);
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è (${telegramId}): ${error.message}`);
    }
  },
  sendSwapRequest: async (telegramId, requester, subjectName, swapRequestId) => {
    if (!botInstance) {
      console.error('Bot –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!');
      return;
    }
    try {
      const message = `üëã –ü—Ä–∏–≤—ñ—Ç!\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á **${requester.firstName} ${requester.surname}** (@${requester.username}) —Ö–æ—á–µ –ø–æ–º—ñ–Ω—è—Ç–∏—Å—è –∑ –≤–∞–º–∏ –º—ñ—Å—Ü—è–º–∏ –≤ —á–µ—Ä–∑—ñ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç **${subjectName}**.\n\n–¶–µ–π –∑–∞–ø–∏—Ç –¥—ñ–π—Å–Ω–∏–π 15 —Ö–≤–∏–ª–∏–Ω.`;
      
      await botInstance.telegram.sendMessage(telegramId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏', callback_data: `swap_approve_${swapRequestId}` },
              { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `swap_reject_${swapRequestId}` }
            ]
          ]
        }
      });
      
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è swap-–∑–∞–ø–∏—Ç—É (${telegramId}): ${error.message}`);
    }
  },
};