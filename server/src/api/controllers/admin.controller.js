const Group = require('../../models/Group.model');
const User = require('../../models/User.model');
const notificationService = require('../../services/notification.service');
exports.getPendingGroups = async (req, res) => {
  try {
    if (req.user.role !== 'super_admin') {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' });
    }
    const groups = await Group.find({ status: 'pending' }).populate('monitor', 'firstName lastName username');
    res.status(200).json(groups);
  } catch (error) {
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.approveGroup = async (req, res) => {
  try {
    if (req.user.role !== 'super_admin') {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' });
    }

    const group = await Group.findById(req.params.groupId);
    if (!group) {
      return res.status(404).json({ message: '–ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const monitorId = group.monitor;
    const monitor = await User.findById(monitorId);
    
    if (!monitor) {
      await Group.findByIdAndDelete(req.params.groupId);
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ —Å—Ç–≤–æ—Ä–∏–≤ –∑–∞–ø–∏—Ç, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    if (monitor.groups.length > 0) {
      await Group.findByIdAndDelete(req.params.groupId);
      return res.status(400).json({ message: '–¶–µ–π —é–∑–µ—Ä –≤–∂–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —ñ–Ω—à–æ—ó –≥—Ä—É–ø–∏' });
    }

    await group.updateOne({
      status: 'active',
      $addToSet: { members: monitorId }
    });

    // ---- –û–°–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ----
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–ª—å "monitor", –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û —é–∑–µ—Ä –Ω–µ super_admin
    const newRole = monitor.role === 'super_admin' ? 'super_admin' : 'monitor';
    // ------------------------

    await User.findByIdAndUpdate(monitorId, {
      role: newRole, // <-- —Ç—É—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –∑–º—ñ–Ω–Ω—É
      $addToSet: { groups: group._id }
    });
    await notificationService.sendNotification(monitor.telegramId, `üéâ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏ "${group.name}" –±—É–ª–æ –°–•–í–ê–õ–ï–ù–û!`);
    res.status(200).json({ message: '–ì—Ä—É–ø—É —Å—Ö–≤–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –≥—Ä—É–ø–∏:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.rejectGroup = async (req, res) => {
  try {
    if (req.user.role !== 'super_admin') {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' });
    }
    
    await Group.findByIdAndDelete(req.params.groupId);
    res.status(200).json({ message: '–ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ' });
  } catch (error) {
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};