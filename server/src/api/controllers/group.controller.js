const Group = require('../../models/Group.model');
const User = require('../../models/User.model');
const crypto = require('crypto');
const notificationService = require('../../services/notification.service');
async function userHasGroup(userId) {
  const user = await User.findById(userId);
  if (user.groups.length > 0) return true;

  const pendingGroup = await Group.findOne({ monitor: userId, status: 'pending' });
  if (pendingGroup) return true;

  return false;
}

exports.requestGroupCreation = async (req, res) => {
  try {
    const { name } = req.body;
    const userId = req.user.userId;

    if (!name) {
      return res.status(400).json({ message: '–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é' });
    }

    if (await userHasGroup(userId)) {
      return res.status(403).json({ message: '–í–∏ –≤–∂–µ –≤ –≥—Ä—É–ø—ñ –∞–±–æ –æ—á—ñ–∫—É—î—Ç–µ –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è' });
    }

    const invitationCode = crypto.randomBytes(4).toString('hex');

    const newGroup = new Group({
      name,
      monitor: userId,
      invitationCode,
      status: 'pending', 
    });

    await newGroup.save();
    res.status(201).json(newGroup);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –Ω–∞ –≥—Ä—É–ø—É:', error.message);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.joinGroup = async (req, res) => {
  try {
    const { invitationCode } = req.body;
    const userId = req.user.userId;
    
    if (await userHasGroup(userId)) {
      return res.status(403).json({ message: '–í–∏ –≤–∂–µ –≤ –≥—Ä—É–ø—ñ –∞–±–æ –æ—á—ñ–∫—É—î—Ç–µ –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è' });
    }

    const group = await Group.findOne({ invitationCode, status: 'active' });
    if (!group) {
      return res.status(404).json({ message: '–ê–∫—Ç–∏–≤–Ω—É –≥—Ä—É–ø—É –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (group.members.includes(userId) || group.pendingMembers.includes(userId)) {
      return res.status(400).json({ message: '–í–∏ –≤–∂–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º –∞–±–æ –æ—á—ñ–∫—É—î—Ç–µ –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è' });
    }
    
    await Group.findByIdAndUpdate(group._id, { $addToSet: { pendingMembers: userId } });

    // ---- –û–°–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ----
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ –Ω–µ –æ–±'—î–∫—Ç –≥—Ä—É–ø–∏
    res.status(200).json({ message: `–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤—Å—Ç—É–ø –¥–æ "${group.name}" –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç–∞—Ä–æ—Å—Ç—ñ.` });
    // ------------------------
  } catch (error) {
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.getMyGroups = async (req, res) => {
  try {
    const groups = await Group.find({ members: req.user.userId, status: 'active' });
    res.status(200).json(groups);
  } catch (error) {
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.getMyPendingGroup = async (req, res) => {
  try {
    const group = await Group.findOne({ monitor: req.user.userId, status: 'pending' });
    res.status(200).json(group);
  } catch (error) {
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.getGroupManagementData = async (req, res) => {
  try {
    const { groupId } = req.params;
    const group = await Group.findById(groupId)
      .populate('members', 'firstName lastName username')
      .populate('pendingMembers', 'firstName lastName username');
      
    if (!group) {
      return res.status(404).json({ message: '–ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    if (group.monitor.toString() !== req.user.userId) {
      return res.status(403).json({ message: '–¢—ñ–ª—å–∫–∏ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –º–æ–∂–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä—É–ø–æ—é' });
    }
    
    res.status(200).json(group);
  } catch (error) {
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.approveMember = async (req, res) => {
  try {
    const { groupId, userId } = req.body;
    const monitorId = req.user.userId;

    const group = await Group.findById(groupId);
    if (group.monitor.toString() !== monitorId) {
      return res.status(403).json({ message: '–¢—ñ–ª—å–∫–∏ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –º–æ–∂–µ —Å—Ö–≤–∞–ª—é–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏' });
    }
    
    const user = await User.findById(userId);
    if (user.groups.length > 0) {
       return res.status(400).json({ message: '–°—Ç—É–¥–µ–Ω—Ç –≤–∂–µ –ø–µ—Ä–µ–±—É–≤–∞—î –≤ —ñ–Ω—à—ñ–π –≥—Ä—É–ø—ñ' });
    }

    await Group.findByIdAndUpdate(groupId, {
      $addToSet: { members: userId },
      $pull: { pendingMembers: userId },
    });
    await User.findByIdAndUpdate(userId, {
      $addToSet: { groups: groupId },
    });
    await notificationService.sendNotification(user.telegramId, `üéâ –í–∞—Å –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ –¥–æ –≥—Ä—É–ø–∏ "${group.name}"!`);
    res.status(200).json({ message: '–°—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏' });
  } catch (error) {
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.rejectMember = async (req, res) => {
  try {
    const { groupId, userId } = req.body;
    const monitorId = req.user.userId;

    const group = await Group.findById(groupId);
    if (group.monitor.toString() !== monitorId) {
      return res.status(403).json({ message: '–¢—ñ–ª—å–∫–∏ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –º–æ–∂–µ –≤—ñ–¥—Ö–∏–ª—è—Ç–∏ –∑–∞—è–≤–∫–∏' });
    }

    await Group.findByIdAndUpdate(groupId, {
      $pull: { pendingMembers: userId },
    });
    
    res.status(200).json({ message: '–ó–∞—è–≤–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ' });
  } catch (error) {
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};