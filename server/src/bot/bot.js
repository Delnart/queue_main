const { Telegraf, Scenes, session } = require('telegraf');
const User = require('../models/User.model');
const notificationService = require('../services/notification.service');
const SwapRequest = require('../models/SwapRequest.model');
const Subject = require('../models/Subject.model');
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥—É –ü–Ü–ë
const pibScene = new Scenes.WizardScene(
  'pib-wizard',
  async (ctx) => {
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ **–ü—Ä—ñ–∑–≤–∏—â–µ**:', { parse_mode: 'Markdown' });
    return ctx.wizard.next();
  },
  async (ctx) => {
    ctx.wizard.state.surname = ctx.message.text;
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ **–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ**:', { parse_mode: 'Markdown' });
    return ctx.wizard.next();
  },
  async (ctx) => {
    ctx.wizard.state.patronymic = ctx.message.text;
    const { surname, patronymic } = ctx.wizard.state;
    
    try {
      await User.findOneAndUpdate(
        { telegramId: ctx.from.id },
        { surname, patronymic, firstName: ctx.from.first_name },
        { upsert: true }
      );
      await ctx.reply('–î—è–∫—É—é! –í–∞—à–µ –ü–Ü–ë –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º –Ω–∞ —Å–∞–π—Ç—ñ.');
    } catch (error) {
      await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
    return ctx.scene.leave();
  }
);

const stage = new Scenes.Stage([pibScene]);
bot.use(session());
bot.use(stage.middleware());

bot.start(async (ctx) => {
  const telegramId = ctx.from.id;
  let user = await User.findOne({ telegramId });

  if (!user) {
    user = await new User({
      telegramId,
      firstName: ctx.from.first_name,
      username: ctx.from.username,
    }).save();
    
    await ctx.reply('üëã –í—ñ—Ç–∞—é —É —Å–∏—Å—Ç–µ–º—ñ —á–µ—Ä–≥!\n–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å.');
    await notificationService.sendNotification(telegramId, '–¶–µ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!');
  }
  
  if (!user.surname || !user.patronymic) {
    await ctx.reply('–°—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ü–Ü–ë. –¶–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å—É –≤ —á–µ—Ä–≥–∏.');
    return ctx.scene.enter('pib-wizard');
  }

  await ctx.reply(`–í—ñ—Ç–∞—é, ${user.firstName}! –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.`);
});
// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–•–í–ê–õ–ò–¢–ò"
bot.action(/swap_approve_(.+)/, async (ctx) => {
    const swapRequestId = ctx.match[1];
    const requestedTelegramId = ctx.from.id; // Telegram ID —Ç–æ–≥–æ, —Ö—Ç–æ –Ω–∞—Ç–∏—Å–Ω—É–≤

    try {
        // --- –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---
        // 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–∞–º –∑–∞–ø–∏—Ç –Ü —é–∑–µ—Ä–∞, —â–æ –π–æ–≥–æ —Å—Ç–≤–æ—Ä–∏–≤
        const swap = await SwapRequest.findById(swapRequestId).populate('requester');
        
        // 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —é–∑–µ—Ä–∞, –Ø–ö–ò–ô –ù–ê–¢–ò–°–ù–£–í –∫–Ω–æ–ø–∫—É
        const requestedUser = await User.findOne({ telegramId: requestedTelegramId });

        // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—É —ñ —á–∏ —Ç–æ–π —é–∑–µ—Ä –Ω–∞—Ç–∏—Å–Ω—É–≤
        if (!swap || swap.status !== 'pending' || !requestedUser || !swap.requested.equals(requestedUser._id)) {
            try {
                // –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–º–∏–ª–∫–∞, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–µ
                 await ctx.editMessageText('–¶–µ–π –∑–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω –≤–∂–µ –Ω–µ–¥—ñ–π—Å–Ω–∏–π.');
            } catch (editError) {
                 console.warn("Could not edit expired swap message:", editError.message);
            }
            // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —ñ—Å–Ω—É—î, –∞–ª–µ –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π, –∑–º—ñ–Ω–∏–º–æ —Å—Ç–∞—Ç—É—Å
            if (swap) {
                await SwapRequest.findByIdAndUpdate(swapRequestId, { status: 'expired' });
            }
            return; // –í–∏—Ö–æ–¥–∏–º–æ
        }
        // --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---

        const subject = await Subject.findById(swap.subject);
        const queueList = (subject.settings && subject.settings.queueList) || [];

        const indexA = queueList.findIndex(e => e.user.equals(swap.requester._id));
        const indexB = queueList.findIndex(e => e.user.equals(swap.requested)); // swap.requested —Ü–µ ObjectId

        if (indexA === -1 || indexB === -1) {
            await SwapRequest.findByIdAndUpdate(swapRequestId, { status: 'expired' });
            return await ctx.editMessageText('–û–±–º—ñ–Ω –Ω–µ–º–æ–∂–ª–∏–≤–∏–π: –æ–¥–∏–Ω –∑ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≤–∏–π—à–æ–≤ –∑ —á–µ—Ä–≥–∏.');
        }

        // --- –ú–ê–ì–Ü–Ø –û–ë–ú–Ü–ù–£ ---
        // –ú—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏ —Ü—ñ–ª—ñ –æ–±'—î–∫—Ç–∏ { user: ObjectId, labInfo: String, timestamp: Date }
        const temp = queueList[indexA];
        queueList[indexA] = queueList[indexB];
        queueList[indexB] = temp;
        // --------------------

        await Subject.findByIdAndUpdate(swap.subject, { 'settings.queueList': queueList });
        await SwapRequest.findByIdAndUpdate(swapRequestId, { status: 'approved' });

        await ctx.editMessageText(`‚úÖ –û–±–º—ñ–Ω –∑ ${swap.requester.firstName} —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ –ø–æ–º—ñ–Ω—è–ª–∏—Å—å –º—ñ—Å—Ü—è–º–∏.`);

        await notificationService.sendNotification(
            swap.requester.telegramId,
            `‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${requestedUser.firstName} –°–•–í–ê–õ–ò–í –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω —É —á–µ—Ä–∑—ñ –Ω–∞ ${subject.name}.`
        );

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –æ–±–º—ñ–Ω—É:', error.message);
        try {
            await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏.');
        } catch (replyError) {
             console.error("Failed to send error reply:", replyError.message);
        }
    }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–Ü–î–•–ò–õ–ò–¢–ò"
bot.action(/swap_reject_(.+)/, async (ctx) => {
  const swapRequestId = ctx.match[1];
  
  try {
    const swap = await SwapRequest.findByIdAndUpdate(swapRequestId, { status: 'rejected' }, { new: true }).populate('requester');
    if (!swap) {
      return await ctx.editMessageText('–ó–∞–ø–∏—Ç –≤–∂–µ –Ω–µ–¥—ñ–π—Å–Ω–∏–π.');
    }

    await ctx.editMessageText('–í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –∑–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω.');
    
    await notificationService.sendNotification(
      swap.requester.telegramId,
      `‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ctx.from.first_name} –í–Ü–î–•–ò–õ–ò–í –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω.`
    );
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –æ–±–º—ñ–Ω—É:', error.message);
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.');
  }
});
// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å
notificationService.init(bot);

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
bot.launch();
console.log('ü§ñ Telegram-–±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');

module.exports = bot;